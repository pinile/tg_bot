package compost;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.PrintWriter;
import java.util.concurrent.ScheduledExecutorService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class CodeCompostInspectorBot extends TelegramLongPollingBot {

  private boolean usersChanged = false; //
  private static final String STORAGE_FILE = "users.json";

  private static final String TAGS_FILE = "tags.txt";
  private final Set<String> tags = new HashSet<>();

  private final Map<Long, Map<Long, SimpleUser>> groupUsers = new HashMap<>();
  private final ObjectMapper mapper = new ObjectMapper();

  private final String botToken;

  public CodeCompostInspectorBot(String botToken) {
    this.botToken = botToken;
    loadUsersFromFile();
    loadTagsFromFile();

    // —à–µ–¥—É–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
    scheduler.scheduleAtFixedRate(this::saveUsersToFile, 60, 60, TimeUnit.SECONDS);
  }

  @Override
  public String getBotUsername() {
    return "codeCompostInspectorBot";
  }

  @Override
  public String getBotToken() {
    return botToken;
  }

  @Override
  public void onUpdateReceived(Update update) {
    if (update.hasMessage() && update.getMessage().hasText()) {
      Message message = update.getMessage();
      Long chatId = message.getChatId();

      if (message.getChat().isGroupChat() || message.getChat().isSuperGroupChat()) {
        saveUser(chatId, message.getFrom());
      }

      String fullText = message.getText().trim();
      String command = fullText.split(" ")[0];

      switch (command) {
        case "/help":
          sendText(chatId, getHelpMessage());
          break;
        case "/all":
          mentionAll(chatId);
          break;
        case "/tags":
          sendText(chatId, getTagsList());
          break;
        case "/top":
          sendTop(chatId);
          break;
        case "/addtag":
          handleAddTag(chatId, fullText);
          break;
        case "/deltag":
          handleDeleteTag(chatId, fullText);
          break;
        case "/panic":
          sendText(chatId, enablePanic());
          break;
        default:
          sendText(chatId,
              "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–∞–¥–∞–≤–∞–Ω üëæ! –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
      }
    }
  }

  private void saveUser(Long chatId, User user) {
    groupUsers.putIfAbsent(chatId, new HashMap<>());
    Map<Long, SimpleUser> chatMap = groupUsers.get(chatId);

    SimpleUser su = chatMap.get(user.getId());
    if (su == null) {
      su = new SimpleUser(user);
      chatMap.put(user.getId(), su);
    }

    su.messageCount++; // —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    usersChanged = true; // –∏–∑–º–µ–Ω—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞ (60 —Å–µ–∫—É–Ω–¥)
  }

  private void mentionAll(Long chatId) {
    Map<Long, SimpleUser> users = groupUsers.get(chatId);

    if (users == null || users.isEmpty()) {
      sendText(chatId,
          "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª (—Å—É–∫–∏)!");
      return;
    }

    StringBuilder sb = new StringBuilder("üîî –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");

    for (SimpleUser user : users.values()) {
      sb.append(user.toMention()).append(" ");
    }

    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(sb.toString());
    message.enableHtml(true);

    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  private void sendText(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    message.enableHtml(true);
    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  private String getHelpMessage() {
    return """
        ü§ñ CompostInspectorBot ü§ñ
        
        üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è –±–æ—Ç–∞:
        "–ï—Å–ª–∏ –±–∞–≥ –Ω–µ–ª—å–∑—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ - –∑–Ω–∞—á–∏—Ç, –µ–≥–æ –Ω–µ—Ç.
        –ï—Å–ª–∏ —Ö—ç—à—Ç–µ–≥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω–µ –±–∞–≥, –∞ —Ñ–∏—á–∞.
        –ï—Å–ª–∏ –≤—Å–µ –º–æ–ª—á–∞—Ç - –∑–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –ø–∏—Å–∞—Ç—å /all."
        
        üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π:
        /help - –°–ø—Ä–∞–≤–∫–∞... üòë
        /all ‚Äì –ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ—Ö –∏–∑-–ø–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–æ–≥–æ, –∫—Ç–æ —Å–ø–∏—Ç –≤ —É–≥–ª—É). üëπüí§
        /tags ‚Äì –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ. #–æ–ø—è—Ç—å—ç—Ç–æ—Ç–∫–æ—Å—Ç—ã–ª—å
        /addtag #—Ç–µ–≥ ‚Äì –î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥, —á—Ç–æ–±—ã –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞—Ä–¥–∞–∫. üìå
        /deltag #—Ç–µ–≥ - –£–¥–∞–ª–∏—Ç—å —Ö–µ—à—Ç–µ–≥ ‚ûñ
        /top - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚öîÔ∏è
        /panic ‚Äì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å 10 –∑–∞–¥–∞—á –≤ Jira
        """;
  }

  private String getTagsList() {
    if (tags.isEmpty()) {
      return "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.";
    }

    StringBuilder sb = new StringBuilder("üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n");
    for (String tag : tags) {
      sb.append(tag).append("\n");
    }
    return sb.toString();
  }

  private String enablePanic() {
    return """
        üö® PANIC MODE ACTIVATED üö®
        
        –°–æ–∑–¥–∞–Ω–∏–µ 10 –∑–∞–¥–∞—á –≤ Jira...
        ‚úÖ BUG-123: "–°—Ä–æ—á–Ω–æ –≤—Å—ë –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å"
        ‚úÖ BUG-124: "–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ‚úÖ TASK-777: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ —á–∞—Ç, —á—Ç–æ –≤—Å—ë –ø–ª–æ—Ö–æ"
        ‚úÖ TASK-778: "–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–∫—Ä—ã–ª–∏"
        ‚úÖ TASK-999: "–°–æ–∑–¥–∞—Ç—å –µ—â—ë 5 –∑–∞–¥–∞—á"
        ‚úÖ BUG-666: "–ü–æ—á–∏–Ω–∏—Ç—å –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–∞–º –∏ –≤–Ω—ë—Å"
        ‚úÖ TASK-001: "–ü—Ä–∏—Ç–≤–æ—Ä–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –≤ –æ—Ç–ø—É—Å–∫–µ"
        ‚úÖ TASK-002: "–°–æ–∑–≤–æ–Ω –Ω–∞ 3 —á–∞—Å–∞ –±–µ–∑ –ø–æ–≤–µ—Å—Ç–∫–∏"
        ‚úÖ TASK-003: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∏ –±–µ–∂–∞—Ç—å"
        ‚úÖ TASK-004: "–û—Ç–∫—Ä—ã—Ç—å Notion –∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ"
        """;
  }

  private void loadUsersFromFile() {
    try {
      File file = new File(STORAGE_FILE);
      if (file.exists()) {
        Map<Long, Map<Long, SimpleUser>> data = mapper.readValue(file, new TypeReference<>() {
        });
        groupUsers.putAll(data);
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤: " + e.getMessage());
    }
  }

  private void loadTagsFromFile() {
    File file = new File(TAGS_FILE);
    if (!file.exists()) {
      return;
    }

    try (Scanner scanner = new Scanner(file)) {
      while (scanner.hasNextLine()) {
        String line = scanner.nextLine().trim();
        if (!line.isEmpty()) {
          tags.add(line);
        }
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ tags.txt: " + e.getMessage());
    }
  }

  private void saveTagsToFile() {
    try (PrintWriter writer = new PrintWriter(new File(TAGS_FILE))) {
      for (String tag : tags) {
        writer.println(tag);
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ tags.txt: " + e.getMessage());
    }
  }


  private void handleAddTag(Long chatId, String fullText) {
    String[] parts = fullText.split(" ");
    if (parts.length < 2) {
      sendText(chatId, "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–∞–∂–Ω–æ");
      return;
    }

    String tag = parts[1].trim();
    if (!tag.startsWith("#")) {
      sendText(chatId, "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–æ–ø—Ä–æ—Å");
      return;
    }

    if (tags.contains(tag)) {
      sendText(chatId, "‚è≥ –¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å.");
    } else {
      tags.add(tag);
      saveTagsToFile();
      sendText(chatId, "‚úÖ –¢–µ–≥ " + tag + " –¥–æ–±–∞–≤–ª–µ–Ω!");
    }
  }

  private void handleDeleteTag(Long chatId, String fullText) {
    String[] parts = fullText.split(" ");
    if (parts.length < 2) {
      sendText(chatId, "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–∞–∂–Ω–æ");
      return;
    }

    String tag = parts[1].trim();
    if (!tag.startsWith("#")) {
      sendText(chatId, "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–æ–ø—Ä–æ—Å");
      return;
    }

    if (tags.remove(tag)) {
      saveTagsToFile();
      sendText(chatId, "üóëÔ∏è –¢–µ–≥ " + tag + " —É–¥–∞–ª—ë–Ω.");
    } else {
      sendText(chatId, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç.");
    }
  }

  private void saveUsersToFile() {
    if (!usersChanged) {
      return; // –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
    }

    try {
      mapper.writerWithDefaultPrettyPrinter().writeValue(new File(STORAGE_FILE), groupUsers);
      usersChanged = false; // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤: " + e.getMessage());
    }
  }

  private void sendTop(Long chatId) {
    Map<Long, SimpleUser> users = groupUsers.get(chatId);
    if (users == null || users.isEmpty()) {
      sendText(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.");
      return;
    }

    List<SimpleUser> top = new ArrayList<>(users.values());
    top.sort((a, b) -> Integer.compare(b.messageCount, a.messageCount));

    StringBuilder sb = new StringBuilder("üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");

    int limit = Math.min(10, top.size());
    for (int i = 0; i < limit; i++) {
      SimpleUser u = top.get(i);
      sb.append(i + 1).append(". ").append(u.toMention())
          .append(" ‚Äî ").append(u.messageCount).append(" —Å–æ–æ–±—â–µ–Ω–∏–π\n");
    }

    sendText(chatId, sb.toString());
  }


  // –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  public static class SimpleUser {

    public Long id;
    public String username;
    public String firstName;
    public String lastName;
    public int messageCount = 0; //

    public SimpleUser(User user) {
      this.id = user.getId();
      this.username = user.getUserName();
      this.firstName = user.getFirstName();
      this.lastName = user.getLastName();
    }

    public String toMention() {
      if (username != null) {
        return "@" + username;
      } else {
        String name = (firstName != null ? firstName : "??") +
            (lastName != null ? " " + lastName : "");
        return "<a href=\"tg://user?id=" + id + "\">" + name + "</a>";
      }
    }
  }
}