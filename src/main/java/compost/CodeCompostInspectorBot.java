package compost;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.PrintWriter;
import java.util.concurrent.ScheduledExecutorService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class CodeCompostInspectorBot extends TelegramLongPollingBot {

  private final MessageUtils messageUtils;

  private boolean usersChanged = false; // —Å–º–æ—Ç—Ä–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
  private static final String STORAGE_FILE = "users.json";

  private static final String TAGS_FILE = "tags.txt";
  private final Set<String> tags = new HashSet<>();

  private final Map<Long, Map<Long, SimpleUser>> groupUsers = new HashMap<>();
  private final ObjectMapper mapper = new ObjectMapper();

  private final String botToken;

  public CodeCompostInspectorBot(String botToken) {
    this.botToken = botToken;
    loadUsersFromFile();
    loadTagsFromFile();
    this.messageUtils = new MessageUtils(this);

    // —à–µ–¥—É–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
    scheduler.scheduleAtFixedRate(this::saveUsersToFile, 60, 60, TimeUnit.SECONDS);
  }

  @Override
  public String getBotUsername() {
    return "codeCompostInspectorBot";
  }

  @Override
  public String getBotToken() {
    return botToken;
  }

  @Override
  public void onUpdateReceived(Update update) {
    if (update.hasMessage() && update.getMessage().hasText()) {
      Message message = update.getMessage();
      Long chatId = message.getChatId();

      if (message.getChat().isGroupChat() || message.getChat().isSuperGroupChat()) {
        saveUser(chatId, message.getFrom());
      }

      String fullText = message.getText().trim();
      if (fullText.startsWith("/")) {
        String command = fullText.split(" ")[0];

        switch (command) {
          case "/help":
            messageUtils.sendText(chatId, MessageUtils.getHelpMessage());
            break;
          case "/all":
            mentionAll(chatId);
            break;
          case "/tags":
            messageUtils.sendText(chatId, getTagsList());
            break;
          case "/top":
            sendTop(chatId);
            break;
          case "/addtag":
            handleAddTag(chatId, fullText);
            break;
          case "/deltag":
            handleDeleteTag(chatId, fullText);
            break;
          case "/panic":
            messageUtils.sendText(chatId, MessageUtils.enablePanic());
            break;
          default:
            messageUtils.sendText(chatId, MessageUtils.unknownCommandMessage());
        }
      }
      // –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å / - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    }
  }

  private void saveUser(Long chatId, User user) {
    groupUsers.putIfAbsent(chatId, new HashMap<>());
    Map<Long, SimpleUser> chatMap = groupUsers.get(chatId);

    SimpleUser su = chatMap.get(user.getId());
    if (su == null) {
      su = new SimpleUser(user);
      chatMap.put(user.getId(), su);
    }

    su.messageCount++; // —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    usersChanged = true; // –∏–∑–º–µ–Ω—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞ (60 —Å–µ–∫—É–Ω–¥)
  }

  private void mentionAll(Long chatId) {
    Map<Long, SimpleUser> users = groupUsers.get(chatId);

    if (users == null || users.isEmpty()) {
      messageUtils.sendText(chatId, messageUtils.noUsersInChatMessage());
      return;
    }

    StringBuilder sb = new StringBuilder("üîî –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");

    for (SimpleUser user : users.values()) {
      sb.append(user.toMention()).append(" ");
    }

    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(sb.toString());
    message.enableHtml(true);

    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  private String getTagsList() {
    if (tags.isEmpty()) {
      return messageUtils.noTagsMessage();
    }
    StringBuilder sb = new StringBuilder("üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n");
    for (String tag : tags) {
      sb.append(tag).append("\n");
    }
    return sb.toString();
  }

  private void loadUsersFromFile() {
    try {
      File file = new File(STORAGE_FILE);
      if (file.exists()) {
        Map<Long, Map<Long, SimpleUser>> data = mapper.readValue(file, new TypeReference<>() {
        });
        groupUsers.putAll(data);
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤: " + e.getMessage());
    }
  }

  private void loadTagsFromFile() {
    File file = new File(TAGS_FILE);
    if (!file.exists()) {
      return;
    }

    try (Scanner scanner = new Scanner(file)) {
      while (scanner.hasNextLine()) {
        String line = scanner.nextLine().trim();
        if (!line.isEmpty()) {
          tags.add(line);
        }
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ tags.txt: " + e.getMessage());
    }
  }

  private void saveTagsToFile() {
    try (PrintWriter writer = new PrintWriter(new File(TAGS_FILE))) {
      for (String tag : tags) {
        writer.println(tag);
      }
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ tags.txt: " + e.getMessage());
    }
  }


  private void handleAddTag(Long chatId, String fullText) {
    String[] parts = fullText.split(" ");
    if (parts.length < 2) {
      messageUtils.sendText(chatId, "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–∞–∂–Ω–æ");
      return;
    }

    String tag = parts[1].trim();
    if (!tag.startsWith("#")) {
      messageUtils.sendText(chatId, "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–æ–ø—Ä–æ—Å");
      return;
    }

    if (tags.contains(tag)) {
      messageUtils.sendText(chatId, "‚è≥ –¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å.");
    } else {
      tags.add(tag);
      saveTagsToFile();
      messageUtils.sendText(chatId, "‚úÖ –¢–µ–≥ " + tag + " –¥–æ–±–∞–≤–ª–µ–Ω!");
    }
  }

  private void handleDeleteTag(Long chatId, String fullText) {
    String[] parts = fullText.split(" ");
    if (parts.length < 2) {
      messageUtils.sendText(chatId, "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–∞–∂–Ω–æ");
      return;
    }

    String tag = parts[1].trim();
    if (!tag.startsWith("#")) {
      messageUtils.sendText(chatId, "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–æ–ø—Ä–æ—Å");
      return;
    }

    if (tags.remove(tag)) {
      saveTagsToFile();
      messageUtils.sendText(chatId, "üóëÔ∏è –¢–µ–≥ " + tag + " —É–¥–∞–ª—ë–Ω.");
    } else {
      messageUtils.sendText(chatId, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç.");
    }
  }

  private void saveUsersToFile() {
    if (!usersChanged) {
      return; // –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
    }

    try {
      mapper.writerWithDefaultPrettyPrinter().writeValue(new File(STORAGE_FILE), groupUsers);
      usersChanged = false; // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    } catch (IOException e) {
      System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤: " + e.getMessage());
    }
  }

  private void sendTop(Long chatId) {
    Map<Long, SimpleUser> users = groupUsers.get(chatId);
    if (users == null || users.isEmpty()) {
      messageUtils.sendText(chatId, MessageUtils.noActiveUserMessage());
      return;
    }

    List<SimpleUser> top = new ArrayList<>(users.values());
    top.sort((a, b) -> Integer.compare(b.messageCount, a.messageCount));

    StringBuilder sb = new StringBuilder("üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");

    int limit = Math.min(10, top.size());
    for (int i = 0; i < limit; i++) {
      SimpleUser u = top.get(i);
      sb.append(i + 1).append(". ").append(u.toMention())
          .append(" ‚Äî ").append(u.messageCount).append(" —Å–æ–æ–±—â–µ–Ω–∏–π\n");
    }

    messageUtils.sendText(chatId, sb.toString());
  }

  // –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  public static class SimpleUser {

    public Long id;
    public String username;
    public String firstName;
    public String lastName;
    public int messageCount = 0; //

    public SimpleUser(User user) {
      this.id = user.getId();
      this.username = user.getUserName();
      this.firstName = user.getFirstName();
      this.lastName = user.getLastName();
    }

    public String toMention() {
      if (username != null) {
        return "@" + username;
      } else {
        String name = (firstName != null ? firstName : "??") +
            (lastName != null ? " " + lastName : "");
        return "<a href=\"tg://user?id=" + id + "\">" + name + "</a>";
      }
    }
  }
}