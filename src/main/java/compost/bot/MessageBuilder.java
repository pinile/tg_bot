package compost.bot;

import compost.model.SimpleUser;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MessageBuilder {

  public static String getHelp() {
    return """
        ü§ñ CompostInspectorBot ü§ñ
        
        üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è –±–æ—Ç–∞:
        –ï—Å–ª–∏ –±–∞–≥ –Ω–µ–ª—å–∑—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ - –∑–Ω–∞—á–∏—Ç, –µ–≥–æ –Ω–µ—Ç.
        –ï—Å–ª–∏ —Ö—ç—à—Ç–µ–≥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω–µ –±–∞–≥, –∞ —Ñ–∏—á–∞.
        –ï—Å–ª–∏ –≤—Å–µ –º–æ–ª—á–∞—Ç - –∑–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –ø–∏—Å–∞—Ç—å /all
        
        üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /help - –°–ø—Ä–∞–≤–∫–∞... 
        /all - –ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ—Ö –∏–∑-–ø–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–æ–≥–æ, –∫—Ç–æ —Å–ø–∏—Ç –≤ —É–≥–ª—É). üëπüí§
        /tags - –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ. #–æ–ø—è—Ç—å—ç—Ç–æ—Ç–∫–æ—Å—Ç—ã–ª—å
        /addtag #—Ç–µ–≥ - –î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥, —á—Ç–æ–±—ã –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞—Ä–¥–∞–∫. üìå
        /deltag #—Ç–µ–≥ - –£–¥–∞–ª–∏—Ç—å —Ö–µ—à—Ç–µ–≥ ‚ûñ
        /top - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚öîÔ∏è
        /panic - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
        """;
  }

  public static String enablePanic() {
    return """
        üö® PANIC MODE ACTIVATED üö®
        
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ Jira...
        ‚úÖ BUG-124: "–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ‚úÖ TASK-923: "–í—ã–¥–µ–ª–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è"
        ‚úÖ TASK-777: "–ò–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ AIO Tests"
        ‚úÖ EPIC-932: "–ü–ú —Å–ø–∞–ª–∏–ª, —á—Ç–æ —Ç—ã –≤–∫–∞—Ç—É–Ω"
        ‚úÖ TASK-031: "–ü—Ä–∏—Ç–≤–æ—Ä–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –≤ –æ—Ç–ø—É—Å–∫–µ"
        ‚úÖ TASK-032: "–°–æ–∑–≤–æ–Ω –Ω–∞ 3 —á–∞—Å–∞ –±–µ–∑ –ø–æ–≤–µ—Å—Ç–∫–∏"
        ‚úÖ TASK-034: "–û—Ç–∫—Ä—ã—Ç—å Notion –∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ"
        """;
  }

  public static String wrongThreadId(SimpleUser user) {
    return "–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ \"—Å–ø–∞–º –¥–ª—è –±–æ—Ç–∞\", " + mention(user);
  }

  public static String unknownCommand() {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–∞–¥–∞–≤–∞–Ω \uD83D\uDC7E! –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
  }

  public static String noActiveUser() {
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.";
  }

  public static String noTags() {
    return "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.";
  }

  public static String noUsersInChat() {
    return "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª (—Å—É–∫–∏)!";
  }

  public static String missingTagArg() {
    return "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–∞–∂–Ω–æ";
  }

  public static String missingTagToDelete() {
    return "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–∞–∂–Ω–æ";
  }

  public static String invalidTagFormat() {
    return "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–æ–ø—Ä–æ—Å";
  }

  public static String tagExists(String tag) {
    return "‚è≥ –¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å: " + tag;
  }

  public static String tagAdded(String tag) {
    return "‚úÖ –¢–µ–≥ " + tag + " –¥–æ–±–∞–≤–ª–µ–Ω!";
  }

  public static String tagDeleted(String tag) {
    return "üóëÔ∏è –¢–µ–≥ " + tag + " —É–¥–∞–ª—ë–Ω.";
  }

  public static String tagNotFound(String tag) {
    return "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç: " + tag;
  }

  public static String tagList(Set<String> tags) {
    if (tags == null || tags.isEmpty()) {
      return noTags();
    }
    StringBuilder sb = new StringBuilder("üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n");
    for (String tag : tags) {
      sb.append(tag).append("\n");
    }
    return sb.toString();
  }

  public static String mention(SimpleUser user) {
    if (user.getId() != null) {
      return "@" + user.getUsername();
    } else {
      String name = (user.getFirstName() != null ? user.getFirstName() : "??") +
          (user.getLastName() != null ? " " + user.getLastName() : "");
      return "<a href=\"tg://user?id=" + user.getId() + "\">" + name + "</a>";
    }
  }

  public static String topUsers(List<SimpleUser> users, Integer length) {
    StringBuilder sb = new StringBuilder("üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");
    for (int i = 0; i < Math.min(length, users.size()); i++) {
      var u = users.get(i);
      sb.append(i + 1)
          .append(". ")
          .append(mention(u))
          .append(" ‚Äî ")
          .append(u.getMessageCount())
          .append(" —Å–æ–æ–±—â–µ–Ω–∏–π\n");
    }
    return sb.toString();
  }

  public static String mentionAll(Map<Long, SimpleUser> users) {
    StringBuilder sb = new StringBuilder("üîî –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");
    for (SimpleUser user : users.values()) {
      sb.append(mention(user)).append(" ");
    }
    return sb.toString();
  }

}
