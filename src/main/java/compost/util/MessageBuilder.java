package compost.util;

import compost.model.SimpleUser;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MessageBuilder {

  public static String getHelp() {
    return """
        ü§ñ CompostInspectorBot ü§ñ
        üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /help - –°–ø—Ä–∞–≤–∫–∞... 
        /all - –ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ—Ö –∏–∑-–ø–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤ üëπ
        
        /tags - –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.
        /addtag #—Ç–µ–≥ - –î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥ üìå
        /deltag #—Ç–µ–≥ - –£–¥–∞–ª–∏—Ç—å —Ö–µ—à—Ç–µ–≥
        
        /top - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚öîÔ∏è
        /panic - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
        """;
  }

  public static String enablePanic() {
    return """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ Jira...
        ‚úÖ BUG-124: "–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ‚úÖ TASK-923: "–í—ã–¥–µ–ª–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è"
        ‚úÖ TASK-777: "–ò–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ AIO Tests"
        ‚úÖ EPIC-932: "–ü–ú —Å–ø–∞–ª–∏–ª, —á—Ç–æ —Ç—ã –≤–∫–∞—Ç—É–Ω"
        """;
  }

  public static String wrongThreadId(SimpleUser user) {
    return "–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ \"—Å–ø–∞–º –¥–ª—è –±–æ—Ç–∞\", " + mention(user);
  }

  public static String unknownCommand() {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–∞–¥–∞–≤–∞–Ω \uD83D\uDC7E! –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
  }

  public static String noActiveUser() {
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.";
  }

  public static String noTags() {
    return "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.";
  }

  public static String noUsersInChat() {
    return "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª (—Å—É–∫–∏)!";
  }

  public static String missingTagArg() {
    return "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–∞–∂–Ω–æ";
  }

  public static String missingTagToDelete() {
    return "‚ùó –£–∫–∞–∂–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /deltag #–≤–∞–∂–Ω–æ";
  }

  public static String invalidTagFormat() {
    return "‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #. –ü—Ä–∏–º–µ—Ä: /addtag #–≤–æ–ø—Ä–æ—Å";
  }

  public static String tagExists(String tag) {
    return "‚è≥ –¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å: " + tag;
  }

  public static String tagAdded(String tag) {
    return "‚úÖ –¢–µ–≥ " + tag + " –¥–æ–±–∞–≤–ª–µ–Ω!";
  }

  public static String tagDeleted(String tag) {
    return "üóëÔ∏è –¢–µ–≥ " + tag + " —É–¥–∞–ª—ë–Ω.";
  }

  public static String tagNotFound(String tag) {
    return "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç: " + tag;
  }

  public static String tagList(Set<String> tags) {
    if (tags == null || tags.isEmpty()) {
      return noTags();
    }
    StringBuilder sb = new StringBuilder("üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n");
    for (String tag : tags) {
      sb.append(tag).append("\n");
    }
    return sb.toString();
  }

  public static String mention(SimpleUser user) {
    if (user == null) {
      return "??";
    }
    String name = user.getFirstName() != null ? user.getFirstName() :
        (user.getUsername() != null ? "@" + user.getUsername() : "??");

    if (user.getLastName() != null) {
      name += " " + user.getLastName();
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å id, –¥–µ–ª–∞–µ–º mention —á–µ—Ä–µ–∑ markdown
    if (user.getId() != null) {
      return String.format("[%s](tg://user?id=%d)", name, user.getId());
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç id, –Ω–æ –µ—Å—Ç—å username
    if (user.getUsername() != null) {
      return "@" + user.getUsername();
    }
    return name;
  }

  public static String topUsers(Map<SimpleUser, Integer> users) {
    if (users == null || users.isEmpty()) {
      return MessageBuilder.noActiveUser();
    }

    StringBuilder sb = new StringBuilder("üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");
    int rank = 1;

    for (Map.Entry<SimpleUser, Integer> entry : users.entrySet()) {
      SimpleUser user = entry.getKey();
      int messageCount = entry.getValue();

      sb.append(String.format(
          "%d. %s - %d %s\n",
          rank++,
          mention(user),
          messageCount,
          PluralizationHelper.pluralize(messageCount, "—Å–æ–æ–±—â–µ–Ω–∏")
      ));
    }
    return sb.toString();
  }

  public static String mentionAll(Collection<SimpleUser> users) {
    StringBuilder sb = new StringBuilder("üîî –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö –Ω–∞–≤–æ–∑–Ω–∏–∫–æ–≤:\n");
    for (SimpleUser user : users) {
      sb.append(mention(user)).append(" ");
    }
    return sb.toString();
  }

}
