package compost.handlers;

import static org.mockito.Mockito.*;

import compost.bot.CodeCompostInspectorBot.CommandContext;
import compost.bot.handlers.AddTagCommandHandler;
import compost.bot.handlers.DeleteTagCommandHandler;
import compost.bot.handlers.HelpCommandHandler;
import compost.bot.handlers.MentionAllCommandHandler;
import compost.bot.handlers.TagsCommandHandler;
import compost.bot.handlers.TopCommandHandler;
import compost.model.SimpleUser;
import compost.service.TagService;
import compost.service.TagService.TagResult;
import compost.service.UserService;
import compost.storage.MongoUserRepository.RankedUser;
import compost.util.Constants.BotCommand;
import compost.util.Constants.TagOperationResult;
import compost.util.MessageBuilder;
import compost.util.MessageUtils;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;
import lombok.extern.log4j.Log4j2;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.telegram.telegrambots.meta.api.objects.Message;

@Log4j2
@SpringBootTest
@DisplayName("–¢–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.")
class CommandsHandlerTests {

  @Autowired TagsCommandHandler tagsHandler;
  @Autowired AddTagCommandHandler addTagHandler;
  @Autowired DeleteTagCommandHandler deleteTagHandler;
  @Autowired HelpCommandHandler helpHandler;
  @Autowired MentionAllCommandHandler allHandler;
  @Autowired TopCommandHandler topHandler;

  @MockBean TagService tagService;
  @MockBean MessageUtils messageUtils;
  @MockBean UserService userService;

  static Stream<Arguments> provideTagListTestCases() {
    return Stream.of(
        Arguments.of(
            "–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –¥—Ä—É–≥–∏–µ –±–µ–∑",
            Map.of(
                "#beta", "",
                "#apple", "—Ñ—Ä—É–∫—Ç",
                "#zebra", "",
                "#delta", "–±—É–∫–≤–∞",
                "#gamma", "",
                "#banana", "–∂–µ–ª—Ç—ã–π",
                "#alpha", ""),
            String.join(
                "\n",
                "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:",
                "#apple ‚Äî —Ñ—Ä—É–∫—Ç",
                "#banana ‚Äî –∂–µ–ª—Ç—ã–π",
                "#delta ‚Äî –±—É–∫–≤–∞",
                "#alpha",
                "#beta",
                "#gamma",
                "#zebra")),
        Arguments.of(
            "–¢–µ—Å—Ç —Å —Ç–µ–≥–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
            Map.of(
                "#one", "",
                "#two", "",
                "#three", "",
                "#four", ""),
            String.join("\n", "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:", "#four", "#one", "#three", "#two")),
        Arguments.of(
            "–¢–µ—Å—Ç —Å —Ç–µ–≥–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ",
            Map.of(
                "#apple", "—Ñ—Ä—É–∫—Ç",
                "#banana", "–∂–µ–ª—Ç—ã–π"),
            String.join("\n", "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:", "#apple ‚Äî —Ñ—Ä—É–∫—Ç", "#banana ‚Äî –∂–µ–ª—Ç—ã–π")));
  }

  static Stream<Arguments> provideAddTagTestCases() {
    return Stream.of(
        Arguments.arguments(
            "–û–¥–∏–Ω —Ç–µ–≥ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1"),
            MessageBuilder.addTagResults(List.of(TagResult.success("#—Ç–µ–≥1", null)))),
        Arguments.arguments(
            "–û–¥–∏–Ω —Ç–µ–≥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1 –æ–ø–∏—Å–∞–Ω–∏–µ"),
            MessageBuilder.addTagResults(List.of(TagResult.success("#—Ç–µ–≥1", "–æ–ø–∏—Å–∞–Ω–∏–µ")))),
        Arguments.arguments(
            "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1 #—Ç–µ–≥2"),
            MessageBuilder.addTagResults(
                List.of(TagResult.success("#—Ç–µ–≥1", null), TagResult.success("#—Ç–µ–≥2", null)))),
        Arguments.arguments(
            "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥4 –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π #—Ç–µ–≥3 #—Ç–µ–≥6"),
            MessageBuilder.addTagResults(
                List.of(
                    TagResult.success("#—Ç–µ–≥4", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π"),
                    TagResult.success("#—Ç–µ–≥3", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π"),
                    TagResult.success("#—Ç–µ–≥6", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π")))),
        Arguments.arguments(
            "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º (–¥—Ä—É–≥–æ–π –ø–æ—Ä—è–¥–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è)",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥4 #—Ç–µ–≥3 –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π #—Ç–µ–≥6"),
            MessageBuilder.addTagResults(
                List.of(
                    TagResult.success("#—Ç–µ–≥4", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π"),
                    TagResult.success("#—Ç–µ–≥3", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π"),
                    TagResult.success("#—Ç–µ–≥6", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–∏–π")))),
        Arguments.arguments(
            "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏",
            BotCommand.ADDTAG.getCommandWithArg(
                "#—Ç–µ–≥4 –æ–ø–∏—Å–∞–Ω–∏–µ4 #—Ç–µ–≥3 –æ–ø–∏—Å–∞–Ω–∏–µ3 –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Å–∏–º–≤–æ–ª–∞–º–∏!> %^&*() 3 #—Ç–µ–≥6 –æ–ø–∏—Å–∞–Ω–∏–µ_6"),
            MessageBuilder.addTagResults(
                List.of(
                    TagResult.success("#—Ç–µ–≥4", "–æ–ø–∏—Å–∞–Ω–∏–µ4"),
                    TagResult.success(
                        "#—Ç–µ–≥3", "–æ–ø–∏—Å–∞–Ω–∏–µ3 –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Å–∏–º–≤–æ–ª–∞–º–∏!> %^&*() 3"),
                    TagResult.success("#—Ç–µ–≥6", "–æ–ø–∏—Å–∞–Ω–∏–µ_6")))),
        Arguments.arguments(
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1 –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
            MessageBuilder.addTagResults(List.of(TagResult.updated("#—Ç–µ–≥1", "–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")))),
        Arguments.arguments(
            "–û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1"),
            MessageBuilder.addTagResults(List.of(TagResult.updated("#—Ç–µ–≥1", null)))),
        Arguments.arguments(
            "–û–¥–∏–Ω –Ω–æ–≤—ã–π —Ç–µ–≥ –∏ –æ–¥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å –æ—á–∏—Å—Ç–∫–æ–π –æ–ø–∏—Å–∞–Ω–∏—è",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1 –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ #—Ç–µ–≥2"),
            MessageBuilder.addTagResults(
                List.of(
                    TagResult.success("#—Ç–µ–≥1", "–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
                    TagResult.updated("#—Ç–µ–≥2", null)))),
        Arguments.arguments(
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1 —Ç–µ–≥ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"),
            MessageBuilder.addTagResults(
                List.of(TagResult.updated("#—Ç–µ–≥1", "—Ç–µ–≥ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ")))),
        Arguments.arguments(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å —Å–∏–º–≤–æ–ª–∞–º–∏",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥1_—Ç–µ–≥1 #—Ç–µ–≥2-—Ç–µ–≥2 #—Ç–µ–≥3//—Ç–µ–≥3"),
            MessageBuilder.addTagResults(List.of(TagResult.success("#—Ç–µ–≥1_—Ç–µ–≥1", null)))),
        Arguments.arguments(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤, –æ–¥–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å '/'",
            BotCommand.ADDTAG.getCommandWithArg("#—Ç–µ–≥/1 –æ–ø–∏—Å–∞–Ω–∏–µ1 #—Ç–µ–≥2 –æ–ø–∏—Å–∞–Ω–∏–µ2"),
            MessageBuilder.addTagResults(
                List.of(TagResult.invalidFormat(), TagResult.success("#—Ç–µ–≥2", "–æ–ø–∏—Å–∞–Ω–∏–µ2")))),
        Arguments.arguments(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤, —Ç–µ–≥ == 30 —Å–∏–º–≤–æ–ª–æ–≤",
            BotCommand.ADDTAG.getCommandWithArg("#–π—Ü—É–∫–µ—Ñ—ã–≤–∞–ø—è—á—Å–º–∏–π—Ü—É–∫–µ–Ω–µ–∫—É—Ü–π—Ñ—ã–≤–∞"),
            MessageBuilder.addTagResults(
                List.of(TagResult.success("#–π—Ü—É–∫–µ—Ñ—ã–≤–∞–ø—è—á—Å–º–∏–π—Ü—É–∫–µ–Ω–µ–∫—É—Ü–π—Ñ—ã–≤–∞", null)))));
  }

  static Stream<Arguments> provideRemoveTagTestCases() {
    return Stream.of(
        Arguments.arguments(
            TagOperationResult.SUCCESS,
            "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞",
            TagResult.success("#—Ç–µ–≥1", null),
            MessageBuilder.tagDeleted("#—Ç–µ–≥1")),
        Arguments.arguments(
            TagOperationResult.TAG_NOT_FOUND,
            "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞",
            TagResult.tagNotFound("#—Ç–µ–≥2"),
            MessageBuilder.tagNotFound("#—Ç–µ–≥2")),
        Arguments.arguments(
            TagOperationResult.INVALID_FORMAT,
            "–£–¥–∞–ª–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
            TagResult.invalidFormat(),
            MessageBuilder.invalidTagFormat()));
  }

  @ParameterizedTest(name = "[{index}] {0}")
  @MethodSource("provideTagListTestCases")
  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/TagsCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /tags")
  void testHandle_tags(String testDescription, Map<String, String> sortedTagMap, String expected) {
    long chatId = 123L;
    int threadId = 1;
    when(tagService.getFormattedTagList(chatId)).thenReturn(expected);

    CommandContext context = new CommandContext(chatId, threadId, null, "/tags");

    tagsHandler.handle(context);

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expected);

    verify(tagService).getFormattedTagList(chatId);
    verify(messageUtils).sendText(chatId, threadId, expected);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TagsCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ .");
  }

  @ParameterizedTest(name = "[{index}] {0}")
  @MethodSource("provideAddTagTestCases")
  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/AddTagCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /addtag")
  void testHandle_addTag(String testDescription, String input, String expectedMessage) {

    long chatId = 123L;
    int threadId = 1;
    Message message = mock(Message.class);
    when(message.getText()).thenReturn(input);

    when(tagService.buildAddTagResponse(chatId, input)).thenReturn(expectedMessage);

    CommandContext context = new CommandContext(chatId, threadId, message, input);

    addTagHandler.handle(context);

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expectedMessage);

    verify(tagService).buildAddTagResponse(chatId, input);
    verify(messageUtils).sendText(chatId, threadId, expectedMessage);
    verifyNoMoreInteractions(tagService, messageUtils);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è AddTagCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");
  }

  @ParameterizedTest(name = "[{index}] [{0}] ‚Üí {1}")
  @MethodSource("provideRemoveTagTestCases")
  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/DeleteTagCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /deltag")
  void testHandle_deleteTag(
      TagOperationResult caseType,
      String testDescription,
      TagResult tagResult,
      String expectedMessage) {

    long chatId = 123L;
    int threadId = 1;
    String text = BotCommand.DELTAG.getCommandWithArg("#test");
    Message message = mock(Message.class);
    when(message.getText()).thenReturn(text);

    when(tagService.tryRemoveTag(chatId, text)).thenReturn(tagResult);

    CommandContext context = new CommandContext(chatId, threadId, message, text);

    deleteTagHandler.handle(context);

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expectedMessage);

    verify(tagService).tryRemoveTag(chatId, text);
    verify(messageUtils).sendText(chatId, threadId, expectedMessage);
    verifyNoMoreInteractions(tagService, messageUtils);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è DeleteTagCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");
  }

  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/HelpCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /deltag")
  @Test
  void testHandle_help() {
    long chatId = 1L;
    int threadId = 5;
    CommandContext context = new CommandContext(chatId, threadId, null, BotCommand.HELP.getCommand());

    helpHandler.handle(context);
    String expected = MessageBuilder.getHelp();

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expected);
    verify(messageUtils).sendText(chatId, threadId, expected);
    verifyNoMoreInteractions(messageUtils);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è HelpCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");
  }

  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/MentionAllCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /all")
  @Test
  void testHandle_mentionAll() {
    long chatId = 5L;
    int threadId = 2;
    List<SimpleUser> users = List.of(
        new SimpleUser(1L, "u1", "First", "One"),
        new SimpleUser(2L, null, "Second", null)
    );

    String built = MessageBuilder.mentionAll(users);
    when(userService.buildMentionAllMessage(chatId)).thenReturn(built);

    String command = BotCommand.ALL.getCommand();
    CommandContext context = new CommandContext(chatId, threadId, null, command);

    allHandler.handle(context);

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", built);

    verify(userService).buildMentionAllMessage(chatId);
    verify(messageUtils).sendText(chatId, threadId, built);
    verifyNoMoreInteractions(userService, messageUtils);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è HelpCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");
  }

  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot/handlers/TopCommandHandler.java. –ö–æ–º–∞–Ω–¥–∞ /all")
  @Test
  void testHandle_topUsers() {
    long chatId = 9L;
    int threadId = 3;
    List<RankedUser> top = List.of(
        new RankedUser(new SimpleUser(1L, "u1", "First", "User"), 10, 1),
        new RankedUser(new SimpleUser(2L, "u2", "Second", "User"), 5, 2)
    );
    String expectedText = MessageBuilder.topUsers(top);

    when(userService.getTopUsers(chatId, 10)).thenReturn(top);

    String command = BotCommand.TOP.getCommand();
    CommandContext ctx = new CommandContext(chatId, threadId, null, command);

    topHandler.handle(ctx);

    log.info("–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expectedText);

    verify(userService).getTopUsers(chatId, 10);
    verify(messageUtils).sendText(chatId, threadId, expectedText);
    verifyNoMoreInteractions(userService, messageUtils);

    log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TopCommandHandler –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");
  }
}
