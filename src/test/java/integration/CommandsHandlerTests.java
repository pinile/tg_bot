package compost.bot.handlers;

import static org.mockito.Mockito.*;

import compost.bot.CodeCompostInspectorBot.CommandContext;
import compost.service.TagService;
import compost.util.MessageUtils;
import java.util.Map;
import java.util.stream.Stream;
import lombok.extern.log4j.Log4j2;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

@Log4j2
@SpringBootTest
@DisplayName("–¢–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.")
class CommandsHandlerTests {

  @Autowired TagsCommandHandler handler;

  @MockBean TagService tagService;

  @MockBean MessageUtils messageUtils;

  static Stream<Arguments> provideTagListTestCases() {
    return Stream.of(
        Arguments.of(
            "–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –¥—Ä—É–≥–∏–µ –±–µ–∑",
            123L,
            456,
            Map.of(
                "#beta", "",
                "#apple", "—Ñ—Ä—É–∫—Ç",
                "#zebra", "",
                "#delta", "–±—É–∫–≤–∞",
                "#gamma", "",
                "#banana", "–∂–µ–ª—Ç—ã–π",
                "#alpha", ""),
            String.join(
                "\n",
                "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:",
                "#apple ‚Äî —Ñ—Ä—É–∫—Ç",
                "#banana ‚Äî –∂–µ–ª—Ç—ã–π",
                "#delta ‚Äî –±—É–∫–≤–∞",
                "#alpha",
                "#beta",
                "#gamma",
                "#zebra")),
        Arguments.of(
            "–¢–µ—Å—Ç —Å —Ç–µ–≥–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
            124L,
            456,
            Map.of(
                "#one", "",
                "#two", "",
                "#three", "",
                "#four", ""),
            String.join("\n", "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:", "#four", "#one", "#three", "#two")),
        Arguments.of(
            "–¢–µ—Å—Ç —Å —Ç–µ–≥–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ",
            125L,
            456,
            Map.of(
                "#apple", "—Ñ—Ä—É–∫—Ç",
                "#banana", "–∂–µ–ª—Ç—ã–π"),
            String.join("\n", "üè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:", "#apple ‚Äî —Ñ—Ä—É–∫—Ç", "#banana ‚Äî –∂–µ–ª—Ç—ã–π")));
  }

  @ParameterizedTest(name = "[{index}] {0}")
  @MethodSource("provideTagListTestCases")
  @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tags")
  void testHandle_tags(
      String testDescription,
      Long chatId,
      Integer threadId,
      Map<String, String> sortedTagMap,
      String expected) {

    when(tagService.getFormattedTagList(chatId)).thenReturn(expected);

    CommandContext context = new CommandContext(chatId, threadId, null, "/tags");

    handler.handle(context);

    log.info("‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{}", expected);

    verify(tagService).getFormattedTagList(chatId);
    verify(messageUtils).sendText(chatId, threadId, expected);

    log.info("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ: –≤—ã–∑–æ–≤ tagService –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã.");
  }
}
